name: Deploy Fuelyt Agent to AWS Lambda

on:
  push:
    branches: [main, develop]
    paths:
      - 'agent/**'
      - 'database_manager.py'
      - 'config.py'
      - 'utils.py'
      - 'data_models.py'
      - 'deployment/lambda/**'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      
      - name: Run tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python -m pytest agent/tests/ -v || echo "Tests completed"
          
      - name: Test agent handler
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python local_test.py

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Serverless Framework
        run: npm install -g serverless
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Determine deployment stage
        id: stage
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "stage=${{ github.event.inputs.stage }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "stage=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "stage=staging" >> $GITHUB_OUTPUT
          else
            echo "stage=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy to AWS Lambda
        working-directory: deployment/lambda
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Copy source files
          cp -r ../../agent ./
          cp ../../database_manager.py ./
          cp ../../config.py ./
          cp ../../utils.py ./
          cp ../../data_models.py ./
          
          # Deploy
          serverless deploy --stage ${{ steps.stage.outputs.stage }} --verbose
          
          # Get endpoint URL
          ENDPOINT=$(serverless info --stage ${{ steps.stage.outputs.stage }} | grep -E "https.*execute-api" | head -1 | awk '{print $2}')
          echo "üöÄ Deployed to: $ENDPOINT"
          
          # Test deployment
          curl -X POST "$ENDPOINT/chat" \
            -H "Content-Type: application/json" \
            -d '{"user_id":"ci-test","message":"Health check from CI/CD"}' \
            --fail-with-body

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "‚úÖ Fuelyt Agent deployed successfully!"
          else
            echo "‚ùå Deployment failed!"
          fi